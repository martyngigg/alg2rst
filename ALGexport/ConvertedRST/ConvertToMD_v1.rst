.. algorithm::

.. summary::

.. alias::

.. properties::

Description
-----------

Used Subalgorithms
------------------

The algorithm uses `Unit Factory <Unit_Factory>`__ and existing unit
conversion procedures from input Workspace Units to the Units, necessary
for transformation into correspondent MD Event workspace. It also uses
`PreprocessDetectorsToMD <PreprocessDetectorsToMD>`__ algorithm to help
with transformation to reciprocal space.

If min, max or both lists of values (properties 12 and 13) for the
algorithm are not specified,
`ConvertToMDMinMaxLocal <ConvertToMDMinMaxLocal>`__ is used to estimate
missing min-max values. This algorithm is also used to calculate min-max
values if specified min-max values are deemed incorrect (e.g. less
values then dimensions or some min values are bigger then max values)

Notes
-----

#. For elastic analysis (:math:`dEAnalysisMode=Elastic`) the target
   `unit <units>`__ is momentum :math:`k`.
#. For no analysis (CopyToMD) mode, the units remain the one, previously
   defined along the workspace's axes.
#. When units of input Matrix 2D workspace (Histogram workspace) are not
   Momentums for Elastic or EnergyTransfer for inelastic mode, the
   algorithm uses internal unit conversion of input X-values based on
   central average of a bin ranges. Namely, value
   :math:`X_c = 0.5*(X_i+X_{i+1})` is calculated and converted to
   Momentum or EnergyTransfer correspondingly. This can give slightly
   different result from the case, when input workspace has been
   converted into correspondent units before converting to MDEvents.
#. Confusing message "Error in execution of algorithm ConvertToMD: emode
   must be equal to 1 or 2 for energy transfer calculation" is generated
   when one tries to process the results of inelastic scattering
   experiment in elastic mode. This message is generated by units
   conversion routine, which finds out that one of the workspace axis is
   in `unit <units>`__ of DeltaE. These units can not be directly
   converted into momentum or energy, necessary for elastic mode. Select
   Direct or Indirect mode and integrate over whole energy transfer
   range to obtain MD workspace, which would correspond to an Elastic
   mode.
#. A good guess on the limits can be obtained from the
   `ConvertToMDMinMaxLocal <ConvertToMDMinMaxLocal>`__ algorithm.

How to write custom ConvertToMD plugin
--------------------------------------

This information intended for developers who have at least basic
knowledge of C++ and needs to write its own `convertToMD
plugin <Writing custom ConvertTo MD transformation>`__.

Usage examples
--------------

The examples below demonstrate the usages of the algorithm in most
common situations. They work with the data files which already used by
Mantid for different testing tasks.

Convert re-binned MARI 2D workspace to 3D MD workspace for further analysis/merging with data at different temperatures
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python


    Load(Filename='MAR11001.nxspe',OutputWorkspace='MAR11001')
    SofQW3(InputWorkspace='MAR11001',OutputWorkspace='MAR11001Qe2',QAxisBinning='0,0.1,7',EMode='Direct')
    AddSampleLog(Workspace='MAR11001Qe2',LogName='T',LogText='100.0',LogType='Number Series')

    ConvertToMD(InputWorkspace='MAR11001Qe2',OutputWorkspace='MD3',QDimensions='CopyToMD',OtherDimensions='T',\
    MinValues='-10,0,0',MaxValues='10,6,500',SplitInto='50,50,5')

Output **MD3** workspace can be viewed in slice-viewer as 3D workspace
with T-axis having single value.

Convert Set of Event Workspaces (Horace scan) to 4D MD workspace, direct mode:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example is based on CNCS\_7860\_event.nxs file, available in Mantid
test folder. The same script without any changes would produce similar
MD workspace given histogram data obtained from inelastic instruments
and stored in nxspe files.

.. code:: python

    # let's load test event workspace, which has been already preprocessed and available in Mantid Test folder
    WS_Name='CNCS_7860_event'
    Load(Filename=WS_Name,OutputWorkspace=WS_Name)
    # this workspace has been  obtained from an inelastic experiment with input energy Ei = 3. 
    # Usually this energy is stored in workspace
    # but if it is not, we have to provide it for inelastic conversion to work.
    AddSampleLog(Workspace=WS_Name,LogName='Ei',LogText='3.0',LogType='Number')
    #
    # set up target ws name and remove target workspace with the same name which can occasionally exist.
    RezWS = 'WS_4D'
    try:
    DeleteWorkspace(RezWS)
    except ValueError:
    print "Target ws ",RezWS," not found in analysis data service\n"
    #
    #---> Start loop over contributing files
    for i in range(0,20,5):
    # the following operations simulate different workspaces, obtained from experiment using rotating crystal;
    # For real experiment we  usually just load these workspaces from nxspe files with proper Psi values defined there
    # and have to set up ub matrix
    SourceWS = 'SourcePart'+str(i)
    # it should be :
    #     Load(Filename=SourceWS_fileName,OutputWorkspace=WS_SourceWS)
    # here, but the test does not have these data so we emulate the data by the following rows: 
    # ws emulation begin ----> 
    CloneWorkspace(InputWorkspace=WS_Name,OutputWorkspace=SourceWS)
    # using scattering on a crystal with cubic lattice and 1,0,0 direction along the beam.
    SetUB(Workspace=SourceWS,a='1.4165',b='1.4165',c='1.4165',u='1,0,0',v='0,1,0')  
    # rotated by proper number of degrees around axis Y
    AddSampleLog(Workspace=SourceWS,LogName='Psi',LogText=str(i),LogType='Number Series')
    SetGoniometer(Workspace=SourceWS,Axis0='Psi,0,1,0,1')
    # ws emulation, end ---------------------------------------------------------------------------------------

    ConvertToMD(InputWorkspace=SourceWS,OutputWorkspace=RezWS,QDimensions='Q3D',QConversionScales='HKL',\
    OverwriteExisting=0,\ 
    dEAnalysisMode='Direct',MinValues='-3,-3,-3,-1',MaxValues='3,3,3,3',\
    SplitInto="20,20,1,1")
    # delete source workspace from memory;
    DeleteWorkspace(SourceWS)
    #---> End loop
    # plot results using sliceviewer
    plotSlice(RezWS, xydim=["[H,0,0]","[0,K,0]"], slicepoint=[0,0] )

Convert set of inelastic results obtained in Powder mode (direct) as function of temperature to a 3D workspace:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The test example is based on MAR1011.nxspe data file, obtained by
reducing test data from the MARI experiment. The data for the experiment
can be located in `Mantid system
test <http://github.com/mantidproject/systemtests>`__ folder. The text
will produce 3-dimensional dataset, with temperature axis. The image
does not change with temperature, as we have just cloned initial
workspace without any changes to the experimental data.

.. code:: python

    # let's load test event workspace, which has been already preprocessed and availible in Mantid Test folder 
    WS_Name='MAR11001.nxspe'
    Load(Filename=WS_Name,OutputWorkspace=WS_Name)
    # this workspace has been  obtained from an inelastic experiment with input energy 
    # nxspe file has input energy stored in it so no need to add energy artificially
    #AddSampleLog(Workspace=WS_Name,LogName='Ei',LogText='3.0',LogType='Number')

    # set up target ws name and remove target workspace with the same name which can occasionally exist.
    RezWS = 'WS_3D'
    try:
    DeleteWorkspace(RezWS)
    except ValueError:
    print "Target ws ",RezWS," not found in analysis data service\n"
    i=0
    # let's assume this is the temperature range obtained in experiments and 
    # each data file is obtained for particular temperature. 
    T = [1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5,9.0,9.5,10.0]
    for i in range(0,len(T),1):
    # EMULATE LOAD OF DIFFERENT results obtained for different temperatures. ------>
    SourceWS = 'SourcePart'+str(i)
    # Load(Filename=WS_Name,OutputWorkspace=WS_Name)    
    CloneWorkspace(InputWorkspace=WS_Name,OutputWorkspace=SourceWS)
    # Each workspace has the temperature from the list above associated with it through the correspondent log file
    AddSampleLog(Workspace=SourceWS,LogName='T',LogText=str(T[i]),LogType='Number Series')
    # END EMULATION ---------------------------------------------------------------------

    ConvertToMD(InputWorkspace=SourceWS,OutputWorkspace=RezWS,QDimensions='|Q|',OverwriteExisting=0,\
    dEAnalysisMode='Direct',OtherDimensions='T',PreprocDetectorsWS='DetWS',
    MinValues='0,-10,0',MaxValues='12,10,10',SplitInto="100,100,20")
    # delete source workspace from memory;
    DeleteWorkspace(SourceWS)

    plotSlice(RezWS, xydim=["|Q|","DeltaE"], slicepoint=[0,0] )

.. algm_categories::
